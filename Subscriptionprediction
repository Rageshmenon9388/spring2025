{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11269205,"sourceType":"datasetVersion","datasetId":7044300}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/srinivasbhootam/subscriptionprediction?scriptVersionId=247531583\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Subscription Renewal Prediction  \nThis notebook implements three ML models (Decision Tree, KNN, Random Forest), evaluates them, applies PCA for dimensionality reduction, and compares before/after performance.\n","metadata":{}},{"cell_type":"code","source":"# 1. Imports & Settings\nimport pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold\nfrom sklearn.metrics import (\n    accuracy_score, precision_score, recall_score, f1_score,\n    confusion_matrix, classification_report\n)\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nRSEED = 42\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-26T16:56:46.648476Z","iopub.execute_input":"2025-06-26T16:56:46.64871Z","iopub.status.idle":"2025-06-26T16:56:51.487877Z","shell.execute_reply.started":"2025-06-26T16:56:46.648689Z","shell.execute_reply":"2025-06-26T16:56:51.486934Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 2. Load Data & Inspect\n","metadata":{}},{"cell_type":"code","source":"# adjust path if needed\nDATA_PATH = '/kaggle/input/subscription-renewal-prediction-dataset/subscription_renewal_prediction.csv'\ndf = pd.read_csv(DATA_PATH)\n\nprint(df.shape)\ndisplay(df.head())\ndf.info()\ndf.describe()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T16:57:19.063727Z","iopub.execute_input":"2025-06-26T16:57:19.064154Z","iopub.status.idle":"2025-06-26T16:57:19.153352Z","shell.execute_reply.started":"2025-06-26T16:57:19.064127Z","shell.execute_reply":"2025-06-26T16:57:19.152557Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 3. Exploratory Data Analysis (EDA)\n","metadata":{}},{"cell_type":"code","source":"# 3a. Target distribution\nsns.countplot(x='renewed', data=df)\nplt.title('Renewal Distribution')\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T16:58:20.937137Z","iopub.execute_input":"2025-06-26T16:58:20.937509Z","iopub.status.idle":"2025-06-26T16:58:21.084873Z","shell.execute_reply.started":"2025-06-26T16:58:20.937485Z","shell.execute_reply":"2025-06-26T16:58:21.083892Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 3b. Histograms for numeric features\nnumeric_cols = df.select_dtypes(include='number').columns.drop('renewed')\ndf[numeric_cols].hist(figsize=(12,8))\nplt.tight_layout()\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T16:58:40.409998Z","iopub.execute_input":"2025-06-26T16:58:40.410387Z","iopub.status.idle":"2025-06-26T16:58:41.226213Z","shell.execute_reply.started":"2025-06-26T16:58:40.410362Z","shell.execute_reply":"2025-06-26T16:58:41.225274Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 3c. Correlation heatmap\nplt.figure(figsize=(10,8))\nsns.heatmap(df[numeric_cols].corr(), annot=True, fmt=\".2f\", cmap='coolwarm')\nplt.title('Feature Correlation')\nplt.show()\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T16:58:54.618272Z","iopub.execute_input":"2025-06-26T16:58:54.618613Z","iopub.status.idle":"2025-06-26T16:58:55.012905Z","shell.execute_reply.started":"2025-06-26T16:58:54.618585Z","shell.execute_reply":"2025-06-26T16:58:55.011835Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 3d. Boxplots of a few features vs target\nfor col in numeric_cols[:4]:\n    plt.figure()\n    sns.boxplot(x='renewed', y=col, data=df)\n    plt.title(f'{col} by Renewal Status')\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T16:59:00.623039Z","iopub.execute_input":"2025-06-26T16:59:00.623407Z","iopub.status.idle":"2025-06-26T16:59:01.209585Z","shell.execute_reply.started":"2025-06-26T16:59:00.623384Z","shell.execute_reply":"2025-06-26T16:59:01.208595Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 4. Data Preprocessing\n1. Handle missing values  \n2. Encode categoricals  \n3. Scale numerics\n","metadata":{}},{"cell_type":"code","source":"# 4a. Check missing values\nprint(\"Missing values per column:\")\nprint(df.isna().sum())\n\n# 4b. Drop any rows missing the target, then impute remaining missing with median\ndf = df.dropna(subset=['renewed'])\ndf = df.fillna(df.median())\nprint(\"\\nAfter imputation, first 5 rows:\")\ndisplay(df.head())\n\n# 4c. Encode categorical variables\ncat_cols = df.select_dtypes(include='object').columns.tolist()\nprint(\"\\nCategorical columns to encode:\", cat_cols)\n\ndf_enc = pd.get_dummies(df, columns=cat_cols, drop_first=True)\nprint(\"\\nAfter encoding, first 5 rows:\")\ndisplay(df_enc.head())\n\n# 4d. Split features/target and show shapes\nX = df_enc.drop('renewed', axis=1)\ny = df_enc['renewed']\nprint(f\"\\nFeature matrix shape: {X.shape}\")\nprint(f\"Target vector shape: {y.shape}\")\n\n# 4e. Scale numeric features\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\nprint(\"\\nScaled feature matrix preview (first 5 rows):\")\nprint(X_scaled[:5])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T17:01:27.029034Z","iopub.execute_input":"2025-06-26T17:01:27.029403Z","iopub.status.idle":"2025-06-26T17:01:27.065069Z","shell.execute_reply.started":"2025-06-26T17:01:27.02938Z","shell.execute_reply":"2025-06-26T17:01:27.063945Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 5. Train/Test Split\n","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X_scaled, y,\n    test_size=0.2,\n    stratify=y,\n    random_state=RSEED\n)\n\nprint(f\"X_train shape: {X_train.shape}\")\nprint(f\"X_test shape:  {X_test.shape}\")\nprint(\"\\ny_train class distribution:\")\nprint(pd.Series(y_train).value_counts(normalize=True))\nprint(\"\\ny_test class distribution:\")\nprint(pd.Series(y_test).value_counts(normalize=True))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T17:01:41.733595Z","iopub.execute_input":"2025-06-26T17:01:41.733911Z","iopub.status.idle":"2025-06-26T17:01:41.748169Z","shell.execute_reply.started":"2025-06-26T17:01:41.73388Z","shell.execute_reply":"2025-06-26T17:01:41.747313Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 6. Baseline Model Training & Evaluation\nModels: Decision Tree, KNN, Random Forest (and optionally Naive Bayes)\n","metadata":{}},{"cell_type":"code","source":"models = {\n    'Decision Tree': DecisionTreeClassifier(random_state=RSEED),\n    'KNN': KNeighborsClassifier(),\n    'Random Forest': RandomForestClassifier(random_state=RSEED),\n    # 'Naive Bayes': GaussianNB()\n}\n\nbaseline_results = {}\n\nfor name, model in models.items():\n    # cross-val accuracy\n    cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n    cv_scores = cross_val_score(model, X_train, y_train, cv=cv, scoring='accuracy')\n    \n    # fit & predict\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    \n    # metrics\n    baseline_results[name] = {\n        'CV Accuracy': f\"{cv_scores.mean():.3f} Â± {cv_scores.std():.3f}\",\n        'Test Accuracy': accuracy_score(y_test, y_pred),\n        'Precision': precision_score(y_test, y_pred),\n        'Recall': recall_score(y_test, y_pred),\n        'F1-Score': f1_score(y_test, y_pred),\n        'Confusion Matrix': confusion_matrix(y_test, y_pred)\n    }\n\n# Display results\nresults_df = pd.DataFrame({m: {k: v for k, v in res.items() if k!='Confusion Matrix'}\n                           for m, res in baseline_results.items()}).T\ndisplay(results_df)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T17:02:15.237892Z","iopub.execute_input":"2025-06-26T17:02:15.238561Z","iopub.status.idle":"2025-06-26T17:02:16.759402Z","shell.execute_reply.started":"2025-06-26T17:02:15.238535Z","shell.execute_reply":"2025-06-26T17:02:16.758293Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Plot confusion matrices\nfor name, res in baseline_results.items():\n    cm = res['Confusion Matrix']\n    plt.figure()\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n    plt.title(f'{name} Confusion Matrix')\n    plt.xlabel('Predicted')\n    plt.ylabel('Actual')\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T17:02:34.141025Z","iopub.execute_input":"2025-06-26T17:02:34.141542Z","iopub.status.idle":"2025-06-26T17:02:34.706344Z","shell.execute_reply.started":"2025-06-26T17:02:34.141514Z","shell.execute_reply":"2025-06-26T17:02:34.70525Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 7. Dimensionality Reduction with PCA\n","metadata":{}},{"cell_type":"code","source":"# fit PCA to retain 95% variance\npca = PCA(n_components=0.95, random_state=RSEED)\nX_train_pca = pca.fit_transform(X_train)\nX_test_pca  = pca.transform(X_test)\n\nprint(\"Original feature count:\", X_train.shape[1])\nprint(\"PCA components retained:\", pca.n_components_)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T17:02:58.524828Z","iopub.execute_input":"2025-06-26T17:02:58.525141Z","iopub.status.idle":"2025-06-26T17:02:58.54971Z","shell.execute_reply.started":"2025-06-26T17:02:58.525119Z","shell.execute_reply":"2025-06-26T17:02:58.548607Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Scree plot\nplt.figure()\nplt.plot(np.cumsum(pca.explained_variance_ratio_))\nplt.xlabel('Number of Components')\nplt.ylabel('Cumulative Explained Variance')\nplt.title('PCA Scree Plot')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T17:03:14.71354Z","iopub.execute_input":"2025-06-26T17:03:14.713848Z","iopub.status.idle":"2025-06-26T17:03:14.919545Z","shell.execute_reply.started":"2025-06-26T17:03:14.713829Z","shell.execute_reply":"2025-06-26T17:03:14.918378Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 8. Re-train & Evaluate on PCA Features\n","metadata":{}},{"cell_type":"code","source":"pca_results = {}\n\nfor name, model in models.items():\n    cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=RSEED)\n    cv_scores = cross_val_score(model, X_train_pca, y_train, cv=cv, scoring='accuracy')\n    \n    model.fit(X_train_pca, y_train)\n    y_pred_pca = model.predict(X_test_pca)\n    \n    pca_results[name] = {\n        'CV Accuracy': f\"{cv_scores.mean():.3f} Â± {cv_scores.std():.3f}\",\n        'Test Accuracy': accuracy_score(y_test, y_pred_pca),\n        'Precision': precision_score(y_test, y_pred_pca),\n        'Recall': recall_score(y_test, y_pred_pca),\n        'F1-Score': f1_score(y_test, y_pred_pca),\n        'Confusion Matrix': confusion_matrix(y_test, y_pred_pca)\n    }\n\n# Display PCA results\npca_df = pd.DataFrame({m: {k: v for k, v in res.items() if k!='Confusion Matrix'}\n                       for m, res in pca_results.items()}).T\ndisplay(pca_df)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T17:03:44.740887Z","iopub.execute_input":"2025-06-26T17:03:44.741384Z","iopub.status.idle":"2025-06-26T17:03:46.567379Z","shell.execute_reply.started":"2025-06-26T17:03:44.741358Z","shell.execute_reply":"2025-06-26T17:03:46.566245Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 9. Before vs. After Comparison\n","metadata":{}},{"cell_type":"code","source":"compare = pd.concat(\n    [results_df.add_suffix(' (orig)'), pca_df.add_suffix(' (PCA)')], axis=1\n)\ndisplay(compare)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-26T17:04:12.435358Z","iopub.execute_input":"2025-06-26T17:04:12.435682Z","iopub.status.idle":"2025-06-26T17:04:12.451568Z","shell.execute_reply.started":"2025-06-26T17:04:12.43566Z","shell.execute_reply":"2025-06-26T17:04:12.450507Z"}},"outputs":[],"execution_count":null}]}